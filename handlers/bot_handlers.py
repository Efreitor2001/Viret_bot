from aiogram import types
from aiogram.dispatcher import FSMContext
from create_bot import bot, dp
from fsms import *
from buttons import *
import psycopg2
from psycopg2 import OperationalError, Error


def create_connection():
    connection = None
    try:
        connection = psycopg2.connect(database="Viret",  # –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
                                      user="Efreitor2001",  # –õ–æ–≥–∏–Ω
                                      password="Antelope1",  # –ü–∞—Ä–æ–ª—å
                                      host="127.0.0.1",  # –•–æ—Å—Ç
                                      port="5432"  # –ü–æ—Ä—Ç
                                      )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
    except OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: '{e}'")
    return connection


def close_connection(connection, cursor):
    if connection:
        cursor.close()
        connection.close()
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")


async def hi(message):
    if message.text == 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ-–º–∞–π–ª':
        await bot.send_message(message.chat.id, "–ñ–¥—ë–º –í–∞—à –µ-–º–∞–π–ª üòâ\n(–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é)")
    elif "@" in message.text or "mail" in message.text:
        get_user_email(message)
        await bot.send_message(message.chat.id, "–ü–æ—á—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º)", reply_markup=mainMenu_kb)
    if message.text == 'ü§ù –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç —É—Å–ª–æ–≤–∏—è', reply_markup=mainMenu_kb)
    elif message.text == 'ü™°üßµ –ü–æ—à–∏–≤':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–Ω—Ñ—É –ø–æ –ø–æ—à–∏–≤—É', reply_markup=mainMenu_kb)
    elif message.text == '‚òë –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–Ω—Ñ—É –ø–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏', reply_markup=mainMenu_kb)
    elif message.text == '‚Ñπ –û –Ω–∞—Å':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–Ω—Ñ—É –æ –∫–æ–º–ø–∞–Ω–∏–∏', reply_markup=mainMenu_kb)
    elif message.text == 'üß∂ –¢–∫–∞–Ω–∏':
        await bot.send_message(message.chat.id, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        await ClothStates.name.set()
    elif message.text == '!–∫–ª–∞–≤–∞':
        await bot.send_message(message.chat.id, '–∫–ª–∞–≤–∞', reply_markup=mainMenu_kb)


async def start(message):
    await bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º...",
                           reply_markup=markup_request)


async def get_user_information(message):
    connection = create_connection()
    cursor = connection.cursor()
    try:
        user = [(message.from_user.first_name, message.from_user.last_name, message.contact.phone_number,
                 message.from_user.id)]
        user_records = ", ".join(["%s"] * len(user))
        insert_query = (
            f"INSERT INTO users (name, surname, phone, tg_user_id) VALUES {user_records}"
        )
        connection.autocommit = True
        cursor.execute(insert_query, user)
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {error}")
    finally:
        close_connection(connection, cursor)
        await bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è —Å–≤—è–∑–∏...',
                               reply_markup=email_kb)


def get_user_email(message):
    connection = create_connection()
    cursor = connection.cursor()
    try:
        user_email = message.text
        insert_query = (
            f"UPDATE users SET email = '{message.text}', email_check = TRUE WHERE tg_user_id = {message.from_user.id} "
            f"AND email_check IS FALSE"
        )
        connection.autocommit = True
        cursor.execute(insert_query, user_email)
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {error}")
    finally:
        close_connection(connection, cursor)


# async def photo_checker(message: types.Message):
#     if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
#         await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')
#     else:
#         await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç—Ä–∞–∂ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª/—Ü–≤–µ—Ç')
#         await ClothStates.footage.set()


async def get_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await bot.send_message(message.chat.id, "–ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?")
    await ClothStates.next()


async def get_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –í–∞–º —Ç–∫–∞–Ω–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await ClothStates.next()


async def get_clothes_names(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['clothes_names'] = message.text
    await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫ (–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
                           reply_markup=skip_kb)
    await ClothStates.next()


async def get_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            data['photo'] = message.photo[0].file_id
        else:
            data['photo'] = message.text
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç—Ä–∞–∂ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª/—Ü–≤–µ—Ç")
    await ClothStates.next()


async def get_footage(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['footage'] = message.text
    await bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –ª–∏ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Å–æ—á–∫–∏ —Ç–∫–∞–Ω–µ–π?\n(–°–î–ï–ö–æ–º (800-1400—Ä))",
                           reply_markup=yesOrNo_kb)
    await ClothStates.next()


async def get_samples(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['samples'] = message.text
    await bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –í–∞–º —É—Å–ª—É–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–∏—å–Ω—ã–π –±—Ä–∞–∫ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –º–µ—Ç—Ä–∞–∂–∞?",
                           reply_markup=yesOrNo_kb)
    await ClothStates.next()


async def get_check(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['check'] = message.text
    await bot.send_message(message.chat.id, "–í–∞—à —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?", reply_markup=payment_kb)
    await ClothStates.next()


async def get_payment_method(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = message.text
        print(data)
    await bot.send_message(message.chat.id, "–ó–∞–≤–∫–∞ –∑–∞–ø–æ–Ω–µ–Ω–∞!", reply_markup=mainMenu_kb)
    await state.finish()


def register_handlers_bot_handlers(dp: dp):
    dp.register_message_handler(start, commands='start')
    dp.register_message_handler(get_user_information, content_types='contact')
    dp.register_message_handler(hi)
    # dp.register_message_handler(photo_checker, lambda message: not message.photo, state=ClothStates.photo)
    dp.register_message_handler(get_name, state=ClothStates.name)
    dp.register_message_handler(get_city, state=ClothStates.city)
    dp.register_message_handler(get_clothes_names, state=ClothStates.clothes_names)
    dp.register_message_handler(get_photo, state=ClothStates.photo)
    dp.register_message_handler(get_footage, state=ClothStates.footage)
    dp.register_message_handler(get_samples, state=ClothStates.samples)
    dp.register_message_handler(get_check, state=ClothStates.check)
    dp.register_message_handler(get_payment_method, state=ClothStates.payment_method)
