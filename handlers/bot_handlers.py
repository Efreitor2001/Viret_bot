from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
import re

from create_bot import bot, dp
from fsms import *
from buttons import *
import psycopg2
from psycopg2 import OperationalError, Error


def create_connection():
    connection = None
    try:
        connection = psycopg2.connect(database="Viret",  # –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
                                      user="Efreitor2001",  # –õ–æ–≥–∏–Ω
                                      password="Antelope1",  # –ü–∞—Ä–æ–ª—å
                                      host="127.0.0.1",  # –•–æ—Å—Ç
                                      port="5432"  # –ü–æ—Ä—Ç
                                      )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
    except OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: '{e}'")
    return connection


def close_connection(connection, cursor):
    if connection:
        cursor.close()
        connection.close()
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")


async def main(message):
    if message.text == 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ-–º–∞–π–ª':
        await bot.send_message(message.chat.id, "–ñ–¥—ë–º –í–∞—à –µ-–º–∞–π–ª üòâ\n(–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é)")
    elif "@" in message.text or "mail" in message.text:
        get_user_email(message)
        await bot.send_message(message.chat.id, "–ü–æ—á—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º)", reply_markup=mainMenu_kb)
    if message.text == 'ü§ù –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç —É—Å–ª–æ–≤–∏—è', reply_markup=mainMenu_kb)
    elif message.text == 'ü™°üßµ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ—à–∏–≤':
        await bot.send_message(message.chat.id, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        await TailoringStates.name.set()
    elif message.text == 'üëï –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–Ω—Ñ—É –ø–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏', reply_markup=mainMenu_kb)
    elif message.text == '‚Ñπ –û –Ω–∞—Å':
        await bot.send_message(message.chat.id, '–¢—É—Ç –±–æ—Ç —Å–∫–∏–Ω–µ—Ç –∏–Ω—Ñ—É –æ –∫–æ–º–ø–∞–Ω–∏–∏', reply_markup=mainMenu_kb)
    elif message.text == 'üß∂ –¢–∫–∞–Ω–∏':
        await bot.send_message(message.chat.id, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        await ClothStates.name.set()
    elif message.text == 'üßæ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å':
        await bot.send_message(message.chat.id, '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', reply_markup=priceMenu_kb)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=mainMenu_kb)
    elif message.text == '!–∫–ª–∞–≤–∞':
        await bot.send_message(message.chat.id, '–∫–ª–∞–≤–∞', reply_markup=mainMenu_kb)


async def start(message):
    await bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º...",
                           reply_markup=markup_request)


async def get_user_information(message):
    connection = create_connection()
    cursor = connection.cursor()
    try:
        user = [(message.from_user.first_name, message.from_user.last_name, message.contact.phone_number,
                 message.from_user.id)]
        user_records = ", ".join(["%s"] * len(user))
        insert_query = (
            f"INSERT INTO users (name, surname, phone, tg_user_id) VALUES {user_records}"
        )
        connection.autocommit = True
        cursor.execute(insert_query, user)
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {error}")
    finally:
        close_connection(connection, cursor)
        await bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è —Å–≤—è–∑–∏...')
        await EmailStates.email.set()


async def get_user_email(message, state: FSMContext):
    connection = create_connection()
    cursor = connection.cursor()
    try:
        user_email = message.text
        insert_query = (
            f"UPDATE users SET email = '{message.text}', email_check = TRUE WHERE tg_user_id = {message.from_user.id} "
            f"AND email_check IS FALSE"
        )
        connection.autocommit = True
        cursor.execute(insert_query, user_email)
    except (Exception, Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {error}")
    finally:
        close_connection(connection, cursor)
        await bot.send_message(message.chat.id, '–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!', reply_markup=mainMenu_kb)
        await state.finish()


# --------------------------------- Clothes States ---------------------------------
async def photo_checker_clothes(message: types.Message):
    if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')
    else:
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç—Ä–∞–∂ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª/—Ü–≤–µ—Ç')
        await ClothStates.footage.set()


async def get_name_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –í–∞–º —Ç–∫–∞–Ω–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await ClothStates.next()


# async def get_city(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['city'] = message.text
#     await bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –í–∞–º —Ç–∫–∞–Ω–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
#     await ClothStates.next()


async def get_clothes_names_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['clothes_names'] = message.text
    await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫ (–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
                           reply_markup=skip_kb)
    await ClothStates.next()


async def get_photo_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç—Ä–∞–∂ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª/—Ü–≤–µ—Ç")
    await ClothStates.next()


async def get_footage_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['footage'] = message.text
    await bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –ª–∏ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Å–æ—á–∫–∏ —Ç–∫–∞–Ω–µ–π?\n(–°–î–ï–ö–æ–º (800-1400—Ä))",
                           reply_markup=yesOrNo_kb)
    await ClothStates.next()


async def get_samples_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['samples'] = message.text
    await bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –í–∞–º —É—Å–ª—É–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–∏—å–Ω—ã–π –±—Ä–∞–∫ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –º–µ—Ç—Ä–∞–∂–∞?",
                           reply_markup=yesOrNo_kb)
    await ClothStates.next()


async def get_check_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['check'] = message.text
    await bot.send_message(message.chat.id, "–í–∞—à —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?", reply_markup=payment_kb)
    await ClothStates.next()


async def get_payment_method_clothes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = message.text
        print(data)
    if 'photo' in data:
        await bot.send_photo(message.chat.id,
                             photo=data['photo'],
                             caption=f"–ò–º—è: {data['name']}\n"
                                     f"–¢–∫–∞–Ω–∏: {data['clothes_names']}\n"
                                     f"–ú–µ—Ç—Ä–∞–∂: {data['footage']}\n"
                                     f"–û–±—Ä–∞–∑—Ü—ã —Ç–∫–∞–Ω–µ–π: {data['samples']}\n"
                                     f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–∞–∫ / –º–µ—Ç—Ä–∞–∂: {data['check']}\n"
                                     f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data['payment_method']}")
    else:
        no_photo = InputFile("photos/no_photo.jpg")
        await bot.send_photo(message.chat.id,
                             photo=no_photo,
                             caption=f"–ò–º—è: {data['name']}\n"
                                     f"–¢–∫–∞–Ω–∏: {data['clothes_names']}\n"
                                     f"–ú–µ—Ç—Ä–∞–∂: {data['footage']}\n"
                                     f"–û–±—Ä–∞–∑—Ü—ã —Ç–∫–∞–Ω–µ–π: {data['samples']}\n"
                                     f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–∞–∫ / –º–µ—Ç—Ä–∞–∂: {data['check']}\n"
                                     f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data['payment_method']}")
    await bot.send_message(message.chat.id, "–ó–∞–≤–∫–∞ –∑–∞–ø–æ–Ω–µ–Ω–∞!", reply_markup=mainMenu_kb)
    await state.finish()


# ---------------------------------------------------------------------------------------------------

# --------------------------------- Tailoring States ---------------------------------
async def get_name_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['name_tailoring'] = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –æ—Ç—à–∏—Ç—å")
    await TailoringStates.next()


async def get_photo_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['photo_tailoring'] = message.photo[0].file_id
    await bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—à–∏—Ç—å?")
    await TailoringStates.next()


async def get_count_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['count_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ª–µ–∫–∞–ª–∞ –∏–ª–∏ –æ–±—Ä–∞–∑–µ—Ü –Ω–∞ —ç—Ç—É –º–æ–¥–µ–ª—å?',
                           reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def sample_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['sample_tailoring'] = message.text
    if message.text == '–î–∞':
        await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ª–µ–∫–∞–ª–∞ –∏–ª–∏ –æ–±—Ä–∞–∑—Ü–∞')
        await TailoringStates.next()
    else:
        await bot.send_message(message.chat.id, '–ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∫–∞–Ω–µ–π?', reply_markup=yesOrNo_kb)
        await TailoringStates.cloth_names_quest.set()


async def sample_photo_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['sample_photo_tailoring'] = message.photo[0].file_id
    await bot.send_message(message.chat.id, '–ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∫–∞–Ω–µ–π?', reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def cloth_names_quest_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['cloth_names_quest_tailoring'] = message.text
    if message.text == '–î–∞':
        await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
        await TailoringStates.next()
    else:
        await bot.send_message(message.chat.id, '–ò–∑–¥–µ–ª–∏—è –±—É–¥—É—Ç –ø–æ–¥ –í–∞—à–∏–º –±—Ä–µ–Ω–¥–æ–º?', reply_markup=yesOrNo_kb)
        await TailoringStates.brand.set()


async def cloth_names_list_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['cloth_names_list_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–ò–∑–¥–µ–ª–∏—è –±—É–¥—É—Ç –ø–æ–¥ –í–∞—à–∏–º –±—Ä–µ–Ω–¥–æ–º?', reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def brand_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['brand_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–ù—É–∂–Ω–∞ –ª–∏ –í–∞–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞?', reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def mark_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['mark_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –ª–∏ –í–∞–º —Å–¥–µ–ª–∞—Ç—å –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è?', reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def declaration_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['declaration_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–§–æ—Ç–æ—Å–µ—Å—Å–∏—é —Å–¥–µ–ª–∞—Ç—å –ù–∞–º?', reply_markup=yesOrNo_kb)
    await TailoringStates.next()


async def photoshoot_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['photoshoot_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=payment_kb)
    await TailoringStates.next()


async def get_payment_method_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['payment_method_tailoring'] = message.text
        print(data_tailoring)
    await bot.send_message(message.chat.id, "–ì–¥–µ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?",
                           reply_markup=social_kb)
    await TailoringStates.next()


async def manager_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['manager_tailoring'] = message.text
    await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω / —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É')
    await TailoringStates.next()


async def phone_tailoring(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tailoring:
        data_tailoring['phone_tailoring'] = message.text
    await bot.send_message(message.chat.id, "–ó–∞–≤–∫–∞ –∑–∞–ø–æ–Ω–µ–Ω–∞!", reply_markup=mainMenu_kb)
    await state.finish()


# ---------------------------------------------------------------------------------------------------
def register_handlers_bot_handlers(dp: dp):
    # --------------------------------- Registration Handlers ---------------------------------
    dp.register_message_handler(start, commands='start')
    dp.register_message_handler(get_user_information, content_types='contact')
    dp.register_message_handler(get_user_email, state=EmailStates.email)
    # ---------------------------------------------------------------------------------------------------

    # --------------------------------- Main Handler ---------------------------------
    dp.register_message_handler(main)
    # ---------------------------------------------------------------------------------------------------

    # --------------------------------- Clothes Handlers ---------------------------------
    dp.register_message_handler(photo_checker_clothes, lambda message: not message.photo, state=ClothStates.photo)
    dp.register_message_handler(get_name_clothes, state=ClothStates.name)
    # dp.register_message_handler(get_city, state=ClothStates.city)
    dp.register_message_handler(get_clothes_names_clothes, state=ClothStates.clothes_names)
    dp.register_message_handler(get_photo_clothes, content_types='photo', state=ClothStates.photo)
    dp.register_message_handler(get_footage_clothes, state=ClothStates.footage)
    dp.register_message_handler(get_samples_clothes, state=ClothStates.samples)
    dp.register_message_handler(get_check_clothes, state=ClothStates.check)
    dp.register_message_handler(get_payment_method_clothes, state=ClothStates.payment_method)
    # ---------------------------------------------------------------------------------------------------

    # --------------------------------- Tailoring Handlers ---------------------------------
    dp.register_message_handler(get_name_tailoring, state=TailoringStates.name)
    dp.register_message_handler(get_photo_tailoring, content_types='photo', state=TailoringStates.photo)
    dp.register_message_handler(get_count_tailoring, state=TailoringStates.count)
    dp.register_message_handler(sample_tailoring, state=TailoringStates.sample)
    dp.register_message_handler(sample_photo_tailoring, state=TailoringStates.sample_photo)
    dp.register_message_handler(cloth_names_quest_tailoring, state=TailoringStates.cloth_names_quest)
    dp.register_message_handler(cloth_names_list_tailoring, state=TailoringStates.cloth_names_list)
    dp.register_message_handler(brand_tailoring, state=TailoringStates.brand)
    dp.register_message_handler(mark_tailoring, state=TailoringStates.mark)
    dp.register_message_handler(declaration_tailoring, state=TailoringStates.declaration)
    dp.register_message_handler(photoshoot_tailoring, state=TailoringStates.photoshoot)
    dp.register_message_handler(get_payment_method_tailoring, state=TailoringStates.payment_method)
    dp.register_message_handler(manager_tailoring, state=TailoringStates.manager)
    dp.register_message_handler(phone_tailoring, state=TailoringStates.phone)
    # ---------------------------------------------------------------------------------------------------
